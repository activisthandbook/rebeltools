// IMPORTANT: To update the security rules, copy & paste the following into the Firebase dashboard. Test & then deploy.

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ðŸ“© EMAIL VERIFIED
    function verifiedUser() {
      return request.auth.token.email_verified;
    }

    // ðŸ”´ IS SUPER ADMIN!!!
    // A super admin has super powers. Be very careful with this one!
    function isSuperADMIN() {
      return
        request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperADMIN == true;
    }

    // ðŸ‘‹ USERS
    match /users/{userID} {

      allow create, update: if
        verifiedUser() && // User is verified
        request.auth.uid == userID && // Users can only create a doc for themselves
        request.resource.data.isSuperADMIN == false; // New users cannot make themselves superADMIN

      allow get, delete: if
        verifiedUser() && // User is verified
        request.auth.uid == userID; // Users can only edit their own doc

      allow read, write, delete: if
        isSuperADMIN() // User is superADMIN ðŸ”´
    }

    // ðŸ‘‹ USERS
    match /publicProfiles/{userID} {

      allow read, update: if
        true;

      allow read, write, delete: if
        isSuperADMIN() // User is superADMIN ðŸ”´
    }

    // ðŸ“¢ MOVEMENTS
    match /movements/{movementID} {

      function isValidMovement() {
        return
          // NAME
          "name" in request.resource.data &&
          request.resource.data.name != null &&

          // PATH
          "path" in request.resource.data &&
          request.resource.data.path != null &&
          request.resource.data.path.matches('^[a-z|0-9]+(-[a-z|0-9]+)*$') &&

          // HEADLINE
          "headline" in request.resource.data &&
          request.resource.data.headline != null &&

          // PIMRARY COLOR
          "primaryColor" in request.resource.data &&
          request.resource.data.primaryColor != null &&
          request.resource.data.primaryColor.matches('^#(?:[0-9a-fA-F]{3}){1,2}$') &&

          // SECONDARY COLOR
          "secondaryColor" in request.resource.data &&
          request.resource.data.secondaryColor != null &&
          request.resource.data.secondaryColor.matches('^#(?:[0-9a-fA-F]{3}){1,2}$') &&

          // DESCRIPTION
          "description" in request.resource.data &&
          request.resource.data.description!= null
      }

      allow read: if true; // Anyone can read movement data

      allow create: if
        verifiedUser() && // User is verified
        isValidMovement() &&
        [request.auth.uid] == request.resource.data.admins; // User can only make themselves admin

      allow update, delete: if
        verifiedUser() && // User is verified
        isValidMovement() &&
        request.auth.uid in resource.data.admins; // User is admin of movement

      allow read, delete: if
        isSuperADMIN() // User is superADMIN ðŸ”´

      allow write: if
        isValidMovement() &&
        isSuperADMIN(); // User is superADMIN ðŸ”´

      match /members/{memberID} {
        allow read, write, delete: if
          request.auth.uid in get(/databases/$(database)/documents/movements/$(resource.data.movementID)).data.admins ||
          isSuperADMIN(); // User is admin or superADMIN ðŸ”´
      }

    }

    // ðŸ‘‹ SIGNUPS
    match /actions/{actionInstanceID} {
      allow create: if verifiedUser();

      allow read: if request.auth.uid == resource.data.userID; // Users can only read their own doc
    }

    // ðŸ“† EVENTS
    match /calendar/{eventID} {

      // FIELDS VALIDATION
      function isValidEvent() {
        return
          // NAME
          "title" in request.resource.data &&
          request.resource.data.title != null &&

          // PATH
          "path" in request.resource.data &&
          request.resource.data.path != null &&
          request.resource.data.path.matches('^[a-z|0-9]+(-[a-z|0-9]+)*$') &&

          // DESCRIPTION
          "description" in request.resource.data &&
          request.resource.data.description != null &&

          // MOVEMENT ID
          "movementID" in request.resource.data &&
          request.auth.uid in get(/databases/$(database)/documents/movements/$(request.resource.data.movementID)).data.admins;
      }

      // function adminInOrPublic() {
      //   return resource.data.visibility == 'public' || request.auth.uid in get(/databases/$(database)/documents/movements/$(resource.data.movementID)).data.admins;
      // }

      allow read: if
        true;
        // adminInOrPublic();

      allow create: if
        verifiedUser() &&
        isValidEvent();

    }

    match /waitingList/{waitinglistID} {

      allow create: if
        true

      allow read, write, delete: if
        isSuperADMIN()

    }

  }
}
